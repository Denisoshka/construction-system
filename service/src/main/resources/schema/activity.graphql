type CustomerOrganization {
  id : ID!
  name: String!
}

type ProjectContract{
  id: ID!
  projectId: ID!
  siteId: ID!
  objectType: String!
  dateOfCreation: Date!
  signingDate: Date
  planStartDate: Date
  planEndDate: Date
  factStartDate: Date
  factEndDate: Date
}

type ObjectType {
  id: Int!
  type: String!
}

input ProjectContractInput{
  siteId: ID!
  customerId: ID!
  objectType: String!
  signingDate: Date
  planStartDate: Date!
  planEndDate: Date!
}

interface ProjectType {
  projectId: ID!
}

type ApartmentHouseProject implements ProjectType {
  projectId: ID!
  floors: Int!
}

type ApartmentHouseProjectContract {
  contract: ProjectContract!
  project: ApartmentHouseProject!
}

input ApartmentHouseProjectInput {
  floors: Int!
}

type SchoolProject implements ProjectType {
  projectId: ID!
  classRoomCount: Int!
  floors: Int!
}

type SchoolProjectContract  {
  id: ID!
  projectId: ID!
  siteId: ID!
  objectType: String!
  dateOfCreation: Date!
  signingDate: Date
  planStartDate: Date
  planEndDate: Date
  factStartDate: Date
  factEndDate: Date
  project: SchoolProject!
}

input SchoolProjectInput {
  classRoomCount: Int!
  floors: Int!
}

type BridgeProject implements ProjectType {
  projectId: ID!
  span: Int!
  width: Int!
  trafficLanesNumber: Int!
}

type BridgeProjectContract {
  contract: ProjectContract!
  project: BridgeProject!
}

input BridgeProjectInput {
  span: Int!
  width: Int!
  trafficLanesNumber: Int!
}

type Material {
  id: ID!
  manufacturer: ID!
  name: String!
  cost: Int!
}

input MaterialInput {
  manufacturer: ID!
  name: String!
  cost: Int!
}

type Manufacturer {
  id: ID!
  manufacturer: String!
}

input ManufacturerInput {
  manufacturer: String!
}

type MaterialUsage {
  workUnitId: ID!
  materialID: ID!
  planQuantity: Int!
  factQuantity: Int!
}

input MaterialUsageInput {
  workUnitId: ID!
  materialID: ID!
  planQuantity: Int!
  factQuantity: Int!
}

type WorkType {
  id: ID!
  name: String
}

type WorkScheduleUnit{
  id: ID!
  workTypeId: ID!
  brigadeId: ID!
  contractId : ID!
  planStartDate: Date!
  planEndDate: Date!
  planOrder: Int!
}

input WorkScheduleUnitInput{
  workTypeId: ID!
  brigadeId: ID!
  planStartDate: Date!
  planEndDate: Date!
  factStartDate: Date
  factEndDate: Date
  planOrder: Int!
  factOrder: Int
}

input CustomerOrganizationInput{
  name  : String
}

input ContractFilter {
  projectType : String
}

type Query {
  customerOrganization(id : ID!): CustomerOrganization!
  customerOrganizations(pagination: Pagination): [CustomerOrganization!]!

  projectContracts(
    pagination : Pagination, filter : ContractFilter
  ): [ProjectContract!]!
  schoolProjectContract(id : ID): SchoolProjectContract!
  apartmentHouseProjectContract(id: ID): ApartmentHouseProjectContract!
  bridgeProjectContract(id: ID!): BridgeProjectContract!

  manufacturer(id: ID!): Manufacturer!
  manufacturers(pagination: Pagination): [Manufacturer!]!

  materialType(id: ID!): Material!
  materialTypes(pagination: Pagination): [Material!]!

  projectWorkSchedule(projectId: ID!, pagination: Pagination!): [WorkScheduleUnit!]!
  brigadeWorkSchedule(
    brigadeId: ID!, pagination: Pagination!
  ): [WorkScheduleUnit!]!
  workScheduleUnit(id: ID!): WorkScheduleUnit!
  workMaterials(scheduleUnitID: ID!, pagination: Pagination!): [MaterialUsage!]!
}

extend type Mutation  {
  createCustomerOrganization(
    input : CustomerOrganizationInput!
  ):CustomerOrganization!
  updateCustomerOrganization(
    id : ID!, input: CustomerOrganizationInput!
  ): CustomerOrganization!
  deleteCustomerOrganization(id : ID!) : Boolean!

  addWorkScheduleUnit(input : WorkScheduleUnitInput!): WorkScheduleUnit!
  updateWorkScheduleUnit(input : WorkScheduleUnitInput!): WorkScheduleUnit!
  deleteWorkScheduleUnit(id:ID!) :Boolean!

  addSchoolProjectContract(
    input: ProjectContractInput!,project: SchoolProjectInput
  ): ProjectContract!
  addBridgeProjectContract(
    input:ProjectContractInput!, project: BridgeProjectInput
  ): ProjectContract!
  addApartmentHouseProjectContract(
    input:ProjectContractInput!, project: ApartmentHouseProjectInput
  ): ProjectContract!

  createManufacturer(input: ManufacturerInput!): Manufacturer!
  deleteManufacturer(id: ID!): Boolean!

  createMaterialType(input : MaterialInput!): Material!
  deleteMaterialType(id :ID!): Boolean!

  addWOrkScheduleUnit(input: WorkScheduleUnitInput!): WorkScheduleUnit!
}