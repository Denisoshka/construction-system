type CustomerOrganization {
  id : ID!
  name: String!
}

type ProjectContract {
  id: ID!
  siteId: ID!
  customerId: ID!
  objectType: String!
  dateOfCreation: Date!
  signingDate: Date
  planStartDate: Date!
  planEndDate: Date!
  factStartDate: Date
  factEndDate: Date
}

input ProjectContractInput {
  siteId: ID!
  customerId: ID!
  objectType: String!
  planStartDate: Date!
  planEndDate: Date!
}

input ProjectContractInputAddition{
  signingDate: Date
  factStartDate: Date
  factEndDate: Date
}

type Material {
  id: ID!
  manufacturer: Manufacturer!
  name: String!
  cost: Int!
}

input MaterialInput {
  manufacturerId: ID!
  name: String!
  cost: Int!
}

type Manufacturer {
  id: ID!
  manufacturer: String!
}

type ObjectType{
  type: String!
}

input ManufacturerInput {
  manufacturer: String!
}

type MaterialUsage {
  id: ID!
  workUnitId: ID!
  material: Material!
  planQuantity: Int!
}

input MaterialUsageInput {
  materialId: ID!
  planQuantity: Int!
}

type WorkType {
  id: ID!
  name: String
}

type WorkScheduleUnit{
  id: ID!
  workTypeId: ID!
  brigadeId: ID!
  workType: WorkType!
  brigade: Brigade!
  contractId : ID!
  planStartDate: Date!
  planEndDate: Date!
  planOrder: Int!
}

input WorkScheduleUnitInput{
  workTypeId: ID!
  brigadeId: ID!
  contractId : ID!
  planStartDate: Date!
  planEndDate: Date!
  planOrder: Int!
}

input CustomerOrganizationInput{
  name : String
}

input ContractFilter {
  projectType : String
}

type Query {
  objectTypes(pagination: Pagination!): [ObjectType!]!
  customerOrganization(id : ID!): CustomerOrganization!
  customerOrganizations(pagination: Pagination!): [CustomerOrganization!]!

  projectContract(id : ID!): ProjectContract!
  contractsByConstructionSite(
    id : ID!, pagination: Pagination!
  ): [ProjectContract!]!

  manufacturer(id: ID!): Manufacturer!
  manufacturers(pagination: Pagination): [Manufacturer!]!

  materialType(id: ID!): Material!
  materialTypes(pagination: Pagination): [Material!]!

  projectWorkSchedule(projectId: ID!, pagination: Pagination!): [WorkScheduleUnit!]!
  brigadeWorkSchedule(
    brigadeId: ID!, pagination: Pagination!
  ): [WorkScheduleUnit!]!
  workScheduleUnit(id: ID!): WorkScheduleUnit!
  workTypes(pagination: Pagination!): [WorkType!]!

  workMaterials(scheduleUnitID: ID!, pagination: Pagination!): [MaterialUsage!]!
}

extend type Mutation  {
  saveContract(input: ProjectContractInput!): ProjectContract!
  deleteContract(id: ID!) : Boolean!
  updateContract(
    id: ID!, update: ProjectContractInputAddition!
  ): ProjectContract!

  createCustomerOrganization(
    input : CustomerOrganizationInput!
  ):CustomerOrganization!
  updateCustomerOrganization(
    id : ID!, input: CustomerOrganizationInput!
  ): CustomerOrganization!
  deleteCustomerOrganization(id : ID!) : Boolean!

  addWorkScheduleUnit(input : WorkScheduleUnitInput!): WorkScheduleUnit!
  updateWorkScheduleUnit(
    id: ID!, input : WorkScheduleUnitInput!
  ): WorkScheduleUnit!
  deleteWorkScheduleUnit(id:ID!) :Boolean!
  deleteWorkScheduleUnits(units: [ID!]!) : Boolean
  #  addProjectContract(input: ProjectContractInput!): ProjectContract!

  createManufacturer(input: ManufacturerInput!): Manufacturer!
  deleteManufacturer(id: ID!): Boolean!

  createMaterialType(input : MaterialInput!): Material!
  deleteMaterialType(id :ID!): Boolean!

  deleteWorkMaterials(materials: [ID!]!) : Boolean
  addWorkMaterials(workUnitId: ID!, materials: [MaterialUsageInput]!) : Boolean
}